project(DTIPrepWorld)
set(LOCAL_PROJECT_NAME DTIPrepWorld)
cmake_minimum_required(VERSION 2.8)
cmake_policy(VERSION 2.8)

enable_testing()
include(Dart)
include(CPack)
include(${CMAKE_CURRENT_SOURCE_DIR}/BuildScripts/ExternalProject.cmake)

include(${CMAKE_CURRENT_SOURCE_DIR}/BuildScripts/CMakeBuildMacros.cmake)

###
SETIFEMPTY(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}/lib)
SETIFEMPTY(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}/lib)
SETIFEMPTY(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}/bin)
SETIFEMPTY(CMAKE_BUNDLE_OUTPUT_DIRECTORY  ${CMAKE_CURRENT_BINARY_DIR}/bin)
#SETIFEMPTY(CMAKE_INSTALL_PREFIX "/opt/${LOCAL_PROJECT_NAME}")

###
CHECKIFSLICER3BUILD()  ## Call the convenience macro

###
ADDFIRSTSLICEREXECUTIONMODEL(${LOCAL_PROJECT_NAME})

if(NOT ITK_FOUND)
    find_package(ITK REQUIRED)
    include(${ITK_USE_FILE})
endif(NOT ITK_FOUND)

if(NOT VTK_FOUND)
    find_package(VTK REQUIRED)
    include(${VTK_USE_FILE})
endif(NOT VTK_FOUND)

# Compute -G arg for configuring external projects with the same CMake generator:
#
if(CMAKE_EXTRA_GENERATOR)
  set(gen "${CMAKE_EXTRA_GENERATOR} - ${CMAKE_GENERATOR}")
else()
  set(gen "${CMAKE_GENERATOR}")
endif()


###
ADDFIRSTINSTANCE_DIRECTORY(${LOCAL_PROJECT_NAME} BRAINSCommonLib)
include_directories(${CMAKE_CURRENT_SOURCE_DIR}/BRAINSCommonLib)

ADDFIRSTINSTANCE_DIRECTORY(${LOCAL_PROJECT_NAME} DicomToNrrdConverter)
ADDFIRSTINSTANCE_DIRECTORY(${LOCAL_PROJECT_NAME} GTRACT)
ADDFIRSTINSTANCE_DIRECTORY(${LOCAL_PROJECT_NAME} DTIProcess)
##  ADDFIRSTINSTANCE_DIRECTORY(${LOCAL_PROJECT_NAME} MultiImageRegistration)
ADDFIRSTINSTANCE_DIRECTORY(${LOCAL_PROJECT_NAME} DTIPrep)

